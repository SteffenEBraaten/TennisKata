/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package tennis

import org.junit.Before
import org.junit.Test
import org.junit.Assert

class GameTest {

    lateinit var player1: Player
    lateinit var player2: Player
    lateinit var game: Game

    @Before
    fun init() {
        player1 = Player("Rafael Nadal", 0)
        player2 = Player("Roger Federer", 0)
        game = Game(player1, player2)
    }

    @Test
    fun `It should increase the players score`() {
        game.increaseScore(player1)

        Assert.assertEquals(1, player1.score)
        Assert.assertEquals(0, player2.score)
    }

    @Test
    fun `It should result in a valid deuce`() {
        for(i in 0..3) {
            game.increaseScore(player1)
            game.increaseScore(player2)
        }
        Assert.assertEquals(true, game.isDeuce(player1.score, player2.score))

        for(i in 0..20) {
            game.increaseScore(player1)
            game.increaseScore(player2)
        }
        Assert.assertEquals(true, game.isDeuce(player1.score, player2.score))
    }

    @Test
    fun `It should result in a invalid deuce`() {
        Assert.assertNotEquals(true, game.isDeuce(player1.score, player2.score))

        for(i in 0..2) {
            game.increaseScore(player1)
            game.increaseScore(player2)
        }
        Assert.assertNotEquals(true, game.isDeuce(player1.score, player2.score))

        game.increaseScore(player1)
        Assert.assertNotEquals(true, game.isDeuce(player1.score, player2.score))
    }

    @Test
    fun `It should result in a advantage`() {
        for(i in 0..4) {
            game.increaseScore(player1)
        }

        for(i in 0..3) {
            game.increaseScore(player2)
        }
        Assert.assertEquals(true, game.hasAdvantage(player1.score, player2.score))
    }

    @Test
    fun `Highest score testing`() {
        for(i in 0..3) {
            game.increaseScore(player1)
        }
        for(i in 0..2) {
            game.increaseScore(player2)
        }

        Assert.assertEquals(player1, game.getPlayerHighestScore())
    }

    @Test
    fun `It should be a winner when the player1 wins at advantage`() {
        for (i in 0..5) {
            game.increaseScore(player1)
        }
        for (i in 0..3) {
            game.increaseScore(player2)
        }
        Assert.assertEquals(true, game.hasWinner(player1.score, player2.score))
    }

    @Test
    fun `It should convert the score into a string version of the tennis score system`() {
        Assert.assertEquals("0", game.convertScore(player1.score))

        game.increaseScore(player1)
        Assert.assertEquals("15", game.convertScore(player1.score))

        game.increaseScore(player1)
        Assert.assertEquals("30", game.convertScore(player1.score))

        game.increaseScore(player1)
        Assert.assertEquals("40", game.convertScore(player1.score))
    }

    @Test (expected = RuntimeException::class)
    fun `It should result in a RuntimeException when trying to get convert a score over 3`() {
        for (i in 0..3) {
            game.increaseScore(player1)
        }
        game.convertScore(player1.score)
    }

    @Test
    fun `It should result in a win for Player1`() {
        for (i in 0..3) {
            game.increaseScore(player1)
        }
        for (i in 0..1) {
            game.increaseScore(player2)
        }
        Assert.assertEquals("${player1.playerName} won the game!", game.getScore())
    }

    @Test
    fun `It should result in a advantage for Player1`() {
        for(i in 0..5) {
            game.increaseScore(player1)
        }

        for(i in 0..4) {
            game.increaseScore(player2)
        }
        Assert.assertEquals("${player1.playerName} has the advantage.", game.getScore())
    }

    @Test
    fun `It should be a deuce`() {
        for(i in 0..4) {
            game.increaseScore(player1)
            game.increaseScore(player2)
        }
        Assert.assertEquals("Deuce", game.getScore())
    }

    @Test
    fun `It should return the score 15 | 0`() {
        game.increaseScore(player1)
        Assert.assertEquals("15 | 0", game.getScore())
    }

    @Test
    fun `It should reset the players scores to 0`() {
        for(i in 0..5) {
            game.increaseScore(player1)
            game.increaseScore(player2)
        }
        game.resetPlayersScore()

        Assert.assertEquals(0, player1.score)
        Assert.assertEquals(0, player2.score)
    }
}
